"""oauth many_to_many

Revision ID: f7e0f80b9600
Revises: 76b150754966
Create Date: 2023-01-21 14:09:35.369465

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "f7e0f80b9600"
down_revision = "76b150754966"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "OauthRole",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("verbose_name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("verbose_name"),
    )
    op.create_index(op.f("ix_OauthRole_id"), "OauthRole", ["id"], unique=False)
    op.create_table(
        "OauthScope",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("module", sa.String(), nullable=False),
        sa.Column("scope", sa.String(), nullable=False),
        sa.Column("is_default", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("scope"),
    )
    op.create_index(op.f("ix_OauthScope_id"), "OauthScope", ["id"], unique=False)
    op.create_table(
        "role_scopes",
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.Column("scope_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["OauthRole.id"],
        ),
        sa.ForeignKeyConstraint(
            ["scope_id"],
            ["OauthScope.id"],
        ),
        sa.PrimaryKeyConstraint("role_id", "scope_id"),
    )
    op.drop_index("ix_oauthscope_id", table_name="oauthscope")
    op.drop_table("oauthscope")
    op.drop_index("ix_oauthrole_id", table_name="oauthrole")
    op.drop_table("oauthrole")
    # op.drop_table('spatial_ref_sys')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "spatial_ref_sys",
        sa.Column("srid", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "auth_name", sa.VARCHAR(length=256), autoincrement=False, nullable=True
        ),
        sa.Column("auth_srid", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "srtext", sa.VARCHAR(length=2048), autoincrement=False, nullable=True
        ),
        sa.Column(
            "proj4text", sa.VARCHAR(length=2048), autoincrement=False, nullable=True
        ),
        sa.CheckConstraint(
            "(srid > 0) AND (srid <= 998999)", name="spatial_ref_sys_srid_check"
        ),
        sa.PrimaryKeyConstraint("srid", name="spatial_ref_sys_pkey"),
    )
    op.create_table(
        "oauthrole",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("verbose_name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="oauthrole_pkey"),
        sa.UniqueConstraint("verbose_name", name="oauthrole_verbose_name_key"),
    )
    op.create_index("ix_oauthrole_id", "oauthrole", ["id"], unique=False)
    op.create_table(
        "oauthscope",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("module", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("scope", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("is_default", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="oauthscope_pkey"),
        sa.UniqueConstraint("scope", name="oauthscope_scope_key"),
    )
    op.create_index("ix_oauthscope_id", "oauthscope", ["id"], unique=False)
    op.drop_table("role_scopes")
    op.drop_index(op.f("ix_OauthScope_id"), table_name="OauthScope")
    op.drop_table("OauthScope")
    op.drop_index(op.f("ix_OauthRole_id"), table_name="OauthRole")
    op.drop_table("OauthRole")
    # ### end Alembic commands ###
